name: Deploy Production Version

on:
  push:
    branches: 
      - master-temp

jobs:
  building:
    name: Building Image to ECR
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Building, Generating and Pushing ECR image
        run: |
          npm install
          npm run build

          sudo docker build -t template-api-nodejs .
          
          aws ecr get-login-password --region sa-east-1 | sudo docker login --username AWS --password-stdin ${{ secrets.PRIVATE_ECR_REPOSITORY }}

          sudo docker tag template-api-nodejs:latest ${{ secrets.PRIVATE_ECR_REPOSITORY }}/template-api-nodejs:prod
          sudo docker push ${{ secrets.PRIVATE_ECR_REPOSITORY }}/template-api-nodejs:prod

  publishing:
    name: Publishing on Production
    runs-on: ubuntu-latest
    needs: building

    steps:
      - uses: actions/checkout@v2

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1
      
      - name: Publishing application on Production
        run: |
          export DOCKER_HOST="ssh://ubuntu@${{ secrets.INSTANCE_IP_PROD }}"

          echo "${{ secrets.SSH_PROD_PRIVATE_KEY }}" > ./key.pem
          chmod 400 ./key.pem

          eval $(ssh-agent)
          ssh-add -k ./key.pem

          mkdir -p ~/.ssh && echo "Host *" > ~/.ssh/config && echo " StrictHostKeyChecking no" >> ~/.ssh/config
          
          cd infra

          echo "" >> .env
          echo "PRIVATE_REGISTRY_REPOSITORY=${{ secrets.PRIVATE_ECR_REPOSITORY }}" >> .env
          echo "STAGE=prod" >> .env

          aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin ${{ secrets.PRIVATE_ECR_REPOSITORY }}

          docker image pull ${{ secrets.PRIVATE_ECR_REPOSITORY }}/template-api-nodejs:prod
          docker-compose down || echo "No containers on running"
          docker-compose up --detach --build

          docker system prune -f